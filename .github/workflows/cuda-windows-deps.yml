name: cuda-windows-deps
on:
  push:
    branches:
      - feature/3.0
      - main
    paths:
      - .github/workflows/cuda-windows-deps.yml
  workflow_dispatch:

env:
  PADDLE_VERSION: "3.0.0"
  PADDLE_BRANCH: "v3.0.0"

jobs:
  build-all:
    runs-on: windows-2022

    strategy:
      matrix:
        include:            
          - name: cu118_cudnn89
            cuda: 11.8.0
            cudnn: 8.9.7.29

          - name: cu126_cudnn95
            cuda: 12.6.3
            cudnn: 9.5.1.17

          - name: cu129_cudnn910
            cuda: 12.9.0
            cudnn: 9.10.1.4
    steps:
      - uses: Jimver/cuda-toolkit@v0.2.24
        if: ${{ matrix.cuda != '' }}
        id: cuda-toolkit
        with:
          method: network
          cuda: ${{ matrix.cuda }}
          # Windows sub-packages are kind of different, so we need to handle them separately
          # https://docs.nvidia.com/cuda/cuda-installation-guide-microsoft-windows/index.html
          sub-packages: ${{ matrix.os == 'ubuntu-22.04' && 
            '["nvcc"]' || 
            '["nvcc", "cublas", "cublas_dev", "cudart", "cufft", "cufft_dev", "curand", "curand_dev", 
              "cusparse", "cusparse_dev", "cusolver", "cusolver_dev", "nvrtc", "nvrtc_dev", 
              "cuda_profiler_api", "nvjpeg", "nvjpeg_dev", "thrust"]' 
            }}
          non-cuda-sub-packages: ${{ matrix.os == 'ubuntu-22.04' && 
            '["libcublas", "libcublas-dev", "libcufft", "libcufft-dev", "libcurand", "libcurand-dev", 
              "libcusparse", "libcusparse-dev", "libcusolver", "libcusolver-dev", "libnvrtc", 
              "libnvrtc-dev", "profiler_api", "libthrust"]' || 
            '[]' }}
          log-file-suffix: ${{ runner.os }}.txt
      
      - name: Download cuDNN
        if: ${{ matrix.cudnn != '' }}
        shell: pwsh
        run: |
          $cudaMajor = '${{ matrix.cuda }}'.Split('.')[0]
          echo "Downloading cuDNN for CUDA $cudaMajor and cuDNN ${{ matrix.cudnn }}..."
          if ("${{ runner.os }}" -eq "Linux") {
            Invoke-WebRequest -Uri https://developer.download.nvidia.com/compute/cudnn/redist/cudnn/linux-x86_64/cudnn-linux-x86_64-${{ matrix.cudnn }}_cuda$cudaMajor-archive.tar.xz -OutFile cudnn.tar.xz
            mkdir cudnn && tar -xf cudnn.tar.xz --strip-components=1 -C cudnn

            sudo cp cudnn/include/* ${{steps.cuda-toolkit.outputs.CUDA_PATH}}/include/
            sudo cp cudnn/lib/* ${{steps.cuda-toolkit.outputs.CUDA_PATH}}/lib64/
          } elseif ("${{ runner.os }}" -eq "Windows") {
            Invoke-WebRequest -Uri https://developer.download.nvidia.com/compute/cudnn/redist/cudnn/windows-x86_64/cudnn-windows-x86_64-${{ matrix.cudnn }}_cuda$cudaMajor-archive.zip -OutFile cudnn.zip
            mkdir cudnn && tar -xf cudnn.zip --strip-components=1 -C cudnn

            cp -Recurse -Force cudnn\* "${{ steps.cuda-toolkit.outputs.CUDA_PATH }}"
          }
      
          echo "::group:: cuDNN files"
          Get-ChildItem -Recurse cudnn
          echo "::endgroup::"

      - name: Copy cuda/cudnn files to artifacts
        run: |
          mkdir artifacts

          $cudaMajor = '${{ matrix.cuda }}'.Split('.')[0]
          echo "Copy CUDA $cudaMajor files to artifacts..."
          cp "${{ steps.cuda-toolkit.outputs.CUDA_PATH }}/cublas64_$cudaMajor.dll" artifacts
          cp "${{ steps.cuda-toolkit.outputs.CUDA_PATH }}/cublasLt64_$cudaMajor.dll" artifacts

          $cudnnMajor = '${{ matrix.cudnn }}'.Split('.')[0]
          echo "Copy cuDNN $cudnnMajor files to artifacts..."
          cp $"{{ steps.cuda-toolkit.outputs.CUDA_PATH }}/cudnn64_$cudnnMajor.dll" artifacts
          cp $"{{ steps.cuda-toolkit.outputs.CUDA_PATH }}/cudnn_cnn_infer64_$cudnnMajor.dll" artifacts
          cp $"{{ steps.cuda-toolkit.outputs.CUDA_PATH }}/cudnn_ops_infer64_$cudnnMajor.dll" artifacts

          echo "List artifacts directory..."
          ls -Recurse artifacts

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-cuda-${{ matrix.cuda }}-cudnn-${{ matrix.cudnn }}